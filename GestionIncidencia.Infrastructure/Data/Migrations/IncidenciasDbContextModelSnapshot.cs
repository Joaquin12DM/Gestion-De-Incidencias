// <auto-generated />
using System;
using Incidencias.Infraestructura.Data.Dbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestionIncidencia.Infrastructure.Data.Migrations
{
    [DbContext(typeof(IncidenciasDbContext))]
    partial class IncidenciasDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IncidenciaUsuario", b =>
                {
                    b.Property<int>("AlumnosIdUsuario")
                        .HasColumnType("int");

                    b.Property<int>("IncidenciasIdIncidencia")
                        .HasColumnType("int");

                    b.HasKey("AlumnosIdUsuario", "IncidenciasIdIncidencia");

                    b.HasIndex("IncidenciasIdIncidencia");

                    b.ToTable("IncidenciaAlumno", (string)null);
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Comentario", b =>
                {
                    b.Property<int>("IdComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComentario"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IncidenciaId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdComentario");

                    b.HasIndex("IncidenciaId");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Incidencia", b =>
                {
                    b.Property<int>("IdIncidencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIncidencia"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocenteId")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Prioridad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TecnicoId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdIncidencia");

                    b.HasIndex("DocenteId");

                    b.HasIndex("TecnicoId");

                    b.ToTable("Incidencias");
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Institucion", b =>
                {
                    b.Property<int>("IdInstitucion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInstitucion"));

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdInstitucion");

                    b.ToTable("Instituciones");
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContrasenaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstitucionId")
                        .HasColumnType("int");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.HasKey("IdUsuario");

                    b.HasIndex("InstitucionId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("IncidenciaUsuario", b =>
                {
                    b.HasOne("Incidencias.Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("AlumnosIdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Incidencias.Dominio.Entidades.Incidencia", null)
                        .WithMany()
                        .HasForeignKey("IncidenciasIdIncidencia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Comentario", b =>
                {
                    b.HasOne("Incidencias.Dominio.Entidades.Incidencia", "Incidencia")
                        .WithMany("Comentarios")
                        .HasForeignKey("IncidenciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incidencia");
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Incidencia", b =>
                {
                    b.HasOne("Incidencias.Dominio.Entidades.Usuario", "Docente")
                        .WithMany("IncidenciasCreadas")
                        .HasForeignKey("DocenteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Incidencias.Dominio.Entidades.Usuario", "Tecnico")
                        .WithMany("IncidenciasAsignadas")
                        .HasForeignKey("TecnicoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Docente");

                    b.Navigation("Tecnico");
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Usuario", b =>
                {
                    b.HasOne("Incidencias.Dominio.Entidades.Institucion", "Institucion")
                        .WithMany("Usuarios")
                        .HasForeignKey("InstitucionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Institucion");
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Incidencia", b =>
                {
                    b.Navigation("Comentarios");
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Institucion", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Incidencias.Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("IncidenciasAsignadas");

                    b.Navigation("IncidenciasCreadas");
                });
#pragma warning restore 612, 618
        }
    }
}
